#include<stdio.h>
#include<malloc.h> // #include<alloc.h>
#include<stdlib.h>
struct linklist // self ref. structure
{
	int num;    // data       
	struct linklist *next;
};
struct linklist *start;

void insert();
void display();
void del();
void edit();
void count();
void sort();
void reverse();
void exit();
void atbeg();
void atbeg1();
void atend();
void atend1();
void before();
void before1();
void after();
void after1();
void atpos();
void atpos1();
int main ( )
{
	int ch1;
	char choice1='y';
	start=NULL;
	system("cls");  // clrscr();
	do
	{
		printf("\n LINKED LIST PROJECT \n");
		printf ("\n 1. INSERT     ");
		printf ("\n 2. DISPLAY     ");
		printf ("\n 3. DELETE      ");
		printf ("\n 4. EDIT        ");
		printf ("\n 5. COUNT NODES ");
		printf ("\n 6. SORTING      ");
		printf ("\n 7. REVERSE     ");
		printf ("\n 8. EXIT        ");
		printf ("\n\n Enter Your Choice = ");
		scanf("%d",&ch1);
		switch (ch1)
		{
			case 1:
			    insert ( );
				break;
			case 2:
				display ( );
				break;
			case 3:
				del ( );
				break;
			case 4:
				edit ( );
				break;
			case 5:
				count ( );
				break;
			case 6:
				sort();
				break;
			case 7:
				reverse ( );
				break;
			case 8:
				choice1='n';
				break;
			default:
				printf ("invalid choice");
		}
	} while (choice1== 'y');
	return 0;
}	// end of main //
void insert ( )
{
	int ch2;
	char choice2;
	do
	{
		printf ("\n 1. ATBEG ") ;
		printf ("\n 2. ATEND")  ;
		printf ("\n 3. BEFORE") ;
		printf ("\n 4. AFTER ")	 ;
		printf ("\n 5. ATPOSI")  ;
		printf ("\n 6. EXIT      ")  ;
		printf ("\n\n Enter Your Choice = ") ;
		scanf ("%d",&ch2);
		switch(ch2)
		{
			case 1:
				atbeg ( );
				break;
			case 2:
				atend ( );
				break;
			case 3:
				before ( );
				break;
			case 4:
				after ( );
				break;
			case 5:
				atpos ( );
				break;
			case 6:
				choice2='n';
				break;
			default:
				printf("INVALID CHOICE");
		}
	}while(choice2=='y');
}// Last Line
void atbeg()
{
	struct linklist *temp,*node;
	node =(struct linklist*)malloc(sizeof(struct linklist));
	printf("\n\n enter a no.");
	scanf("%d",&node->num);
	node->next=NULL;

	if(start==NULL)
	{
		start=node;
		return;
	}
	else
	{
		temp=start;
		start=node;
		node->next=temp;
	}
}

void atend ( )
{
	struct linklist *temp,*node;
	node = (struct linklist*)malloc(sizeof(struct linklist));
	printf("enter the data of node : ");
	scanf("%d",&node->num);
	node->next = NULL;
	if(start==NULL)
	{
		start=node;
		return;
	}
	temp=start;
	while(temp->next!=NULL)
	{
		temp=temp->next; //temp is last node
	}
	temp->next=node;
}

void before( )
{
	int val;
	struct linklist *temp,*temp1,*node;

	printf("\n before which node u want to insert = ");
	scanf("%d",&val);

	node=(struct linklist*)malloc(sizeof(struct linklist));
	printf("enter the data of node");
	scanf("%d",&node->num);
	node->next = NULL;

	temp=start;
	while(temp->num != val) // val = 50
	{
		temp1 = temp;
		temp = temp->next;
	}
	temp1->next=node;
	node->next=temp;
}
void after( )
{
	int val;
	struct linklist *temp,*node;
	printf("\n after which node u want to insert = ");
	scanf("%d",&val);  // 30

	node=(struct linklist*)malloc(sizeof(struct linklist));
	printf("enter the data of node :");
	scanf("%d",&node->num);
	node->next =NULL;

	temp=start;
	while(temp->num != val )
	{
		temp=temp->next;
	}
	node->next=temp->next;
	temp->next=node;
}
/*void after( )
{
	int i;
	printf("\n after which node u want to insert = ");
	scanf("%d",&i);

	struct linklist *temp,*node;
	node=(struct linklist*)malloc(sizeof(struct linklist));
	printf("enter the data of node :");
	scanf("%d",&node->num);
	node->next = NULL;
	temp=start;
	while(temp->num != i )
	{
		temp=temp->next;
	}
	node->next=temp->next;
	temp->next=node;
}*/
void atpos( )
{
	int i=1,count_n=0,pos_n;
	struct linklist *temp,*temp1,*node;
	printf("enter the position no to ADD Node =");
	scanf("%d",&pos_n);

	node=(struct linklist*)malloc(sizeof(struct linklist));
	printf("\n\n enter the data of node : ");
	scanf("%d",&node->num);
	node->next = NULL;

	temp=start;

	while(temp!=NULL)
	{
		count_n = count_n +1;           // count the nodes
		temp=temp->next;
	}
	if (pos_n>count_n)  // position number > total nodes
	{
		printf("\n Not valid ");
		return;
	}
	temp=start;

	while(i<pos_n)
	{
		temp1=temp;
		temp=temp->next;
		i = i+1;
	}
	temp1->next=node;
	node->next=temp;
}






void edit ( )
{
	int i=1,count=0,pos,num1; 
	struct linklist *temp;
	printf("\n enter the position of node for edit =");
	scanf("%d",&pos);
	printf("\n\n enter the data of new node :");
	scanf("%d",&num1); // new data of the node
	temp=start;
	while(temp!=NULL)   // to count the total nodes
	{
		count=count+1;
		temp=temp->next;
	}

	if(pos>count)     // to check validity
	{
		printf("\n Not valid");
		return;
	}
	temp=start;
	while(i<pos)
	{
		i=i+1;
		temp=temp->next;
	}
	temp->num=num1;  // edit that node with new data
	
}

		//display the link list
void display( )  // Algorithm
	{
		struct linklist *temp;
		temp = start;
		while(temp != NULL)
		{
		printf("%d-->",temp->num);
		temp=temp->next;
		}
	}
		//delete the node //

void del( )
{
	int ch3;
	char choice3;

	do
	{
		printf("\n 1. ATBEG 	");
		printf("\n 2. ATEND 	");
		printf("\n 3. BEFORE 	");
		printf("\n 4. AFTER      ");
		printf("\n 5. ATPOSI   ");
		printf("\n 6. GO BACK   ");
		printf("\n\n Enter Your Choice = ");
		scanf("%d",&ch3);
		switch(ch3)
		{
			case 1:
				atbeg1( );  // delete from beg.
				break;
			case 2:
				atend1( );
				break;
			case 3:
				before1( );
				break;
			case 4:
				after1( );
				break;
			case 5:
				atpos1( );
				break;
			case 6:
				choice3='n'; // exit(0);
				break;
			default:
				printf("\n\n INVALID CHOICE ");
			}
		}while(choice3=='y');
}

void atbeg1( )  // delete from atbeg1()
{
	struct linklist *temp;
	temp=start;
	if(temp==NULL)
	{
		printf("LinkedList is Empty !! ");
	}
	else
	{
		start=start->next;
		temp->next = NULL;
		free(temp);
	}
	
}

void atend1( ) // delete from last node
	{
		struct linklist *temp,*temp1;
		temp = start;
		while(temp->next!=NULL)
			{
				temp1=temp;
				temp=temp->next; //temp is last node
			}
			temp1->next=NULL;
			free(temp);
	}
	
	
	
	
void before1( )
{
	int n;
	struct linklist *temp,*temp1,*temp2;
	printf("\n Before which node u want to delete = ");
	scanf("%d",&n);
	temp2=start;
	temp1=temp2->next;
	temp=temp1->next;

	while(temp->num != n) // temp2 --> temp1 --> temp 
	{
		temp2=temp1;
		temp1=temp;
		temp=temp->next;
	}
	temp2->next=temp;
	temp1->next=NULL;
	free(temp1);
}


void after1( )
{
	int n;
	struct linklist *temp,*temp1,*temp2;
	printf("\n after which node u want to delete = ");
	scanf("%d",&n);
	temp2=start;
	temp1=temp2->next;
	temp=temp1->next;

	while(temp2->num != n) // temp2 --> temp1 --> temp 
	{
		temp2=temp1;
		temp1=temp;
		temp=temp->next;
	}
	temp2->next=temp;
	temp1->next=NULL;
	free(temp1);
}
void atpos1( )
{
	int i=1,count_n=0,pos_n;
	struct linklist *temp,*temp1;
	printf("enter the position no = ");
	scanf("%d",&pos_n);
	temp=start;
	while(temp!=NULL)
	{
		count_n=count_n+1;
		temp=temp->next;
	}
	if (pos_n>count_n)
	{
		printf("Not valid ");
		return;
	}
	temp=start;
	
	while(i<pos_n)
	{
		i = i+1;
		temp1=temp;
		temp=temp->next;
	}
	temp1->next=temp->next;
	temp->next=NULL;
	free(temp);
}
// count the nodes //

void count( )
{
	int count=0;
	struct linklist *temp;
	temp=start;

	while (temp!=NULL)
	{
		count=count+1;
		temp=temp->next;
	}
		printf("\n\n the total nodes = %d",count);
}

	// sorting of the link list //
	/*
void sort( )
{
	int n;
	struct linklist *temp,*temp1;
	temp=start;
	while(temp!=NULL)
	{
		temp1=temp->next;
		while(temp1!=NULL)
		{
			if(temp->num>temp1->num)
			{
				n=temp->num;
				temp->num=temp1->num;
				temp1->num=n;
			}
			temp1=temp1->next;
		}
		temp=temp->next;
	}
} */
void sort( )   // Selection Sort
{
	int n;
	struct linklist *temp,*temp1;
	for(temp=start;temp!=NULL;temp=temp->next)
	{	
		for(temp1=temp->next;temp1!=NULL;temp1=temp1->next)
		{
			if(temp->num > temp1->num)
			{
				n=temp->num;
				temp->num=temp1->num;
				temp1->num=n;
			}	
		}
	}
}
void reverse( )
{
	struct linklist *ptr=NULL,*temp=NULL,*old=NULL;
	temp=start;
	while(temp!=NULL)
	{
		old       = ptr;
		ptr       = temp;
		temp      = temp->next;
		ptr->next = old;
	}
	start=ptr;
	ptr = NULL;
	old = NULL;
}















